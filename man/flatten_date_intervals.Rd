% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adls_flatten_data.R
\name{flatten_date_intervals}
\alias{flatten_date_intervals}
\title{Flatten Date Intervals}
\usage{
flatten_date_intervals(data, id, in_date, out_date, status = NULL, lag = 0)
}
\arguments{
\item{data}{A data frame, data frame extension (e.g. a tibble), or a lazy
data frame (e.g. from dbplyr or dtplyr).}

\item{id}{<\code{\link[=dplyr_data_masking]{data-masking}}> One unquoted expression
naming the id variable in data.}

\item{in_date}{<\code{\link[=dplyr_data_masking]{data-masking}}> One unquoted expression
naming the start date variable in data.}

\item{out_date}{<\code{\link[=dplyr_data_masking]{data-masking}}> One unquoted
expression naming the end date variable in data.}

\item{status}{123}

\item{lag}{A numeric, giving the number of days allowed between time
intervals that should be collapsed into one.}
}
\value{
A data frame with the 'id' and simplified 'in_date' and 'out_date'.
}
\description{
A tidyverse compatible function for simplifying time interval data
}
\details{
This functions identifies overlapping time intervals within individual and
collapses them into distinct and disjoint intervals. If 'lag' is specified
then intervals must be more then 'lag' time units apart to be considered
distinct.
}
\examples{

# The flatten function works with both dates and numeric
dat <- data.frame(
   ID    = c(1, 1, 1, 2, 2, 3, 3, 4),
   START = c(1, 2, 5, 3, 6, 2, 3, 6),
   END   = c(3, 3, 7, 4, 9, 3, 5, 8))
dat |> flatten_date_intervals(ID, START, END)

dat <- data.frame(
   ID    = c(1, 1, 1, 2, 2, 3, 3),
   START = as.Date(c("2012-02-15", "2005-12-13", "2006-01-24",
                     "2002-03-14", "1997-02-27",
                     "2008-08-13", "1998-09-23")),
   END   = as.Date(c("2012-06-03", "2007-02-05", "2006-08-22",
                     "2005-02-26", "1999-04-16",
                     "2008-08-22", "2015-01-29")))
#at |> flatten_date_intervals(ID, START, END)

}
\author{
ADLS, EMTH & ASO
}
